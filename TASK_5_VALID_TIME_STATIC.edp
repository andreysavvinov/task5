/* Domain deometry */

real L = 10; /* [m] */
real H = 10; /* [m] */
real Rw = 0.5; /* [m], 0.1 */

/* Physical parameters */

real G = 10e9; /* [Pa] */
real lambda = 20e9; /* [Pa] */
real alpha = 0.8; /* [], Biot coeff. */

real nu = lambda/2/(lambda+G);
real eta = alpha* (1-2*nu)/(2-2*nu);

real k = 1e-15; /* [m^2], Permeability */
real mu = 10-3; /* [Pa*s], Viscosity */

real Seps = 1e-10; /* [1/Pa], Storativity */

func real sigmaXInf(real t){
    return lambda*(2*x + t + 3*y^2 + 2*t*y) + 2*G*(2*x + t) - alpha*(x + t*x^2);
 } /* [Pa], Stress on far field border along X axis */
func real sigmaYInf(real t){
    return lambda*(2*x + t + 3*y^2 + 2*t*y) + 2*G*(3*y^2 + 2*t*y) - alpha*(x + t*x^2); /* [Pa], Stress on far field border along Y axis */
}

func real tauF1(real t){
    return 2*lambda + 4*G - alpha*(1 + 2*t*x);
}
func real tauF2(real t){
    return 6*lambda*y + 12*G*y + 2*lambda*t + 4*G*t;
}

func real SepsF(real t){
    return k/mu * 2*t;
}

real pw = 40e6; /* [Pa], Wellbore pressure */
real p0 = 20e6; /* [Pa], Reservoir pressure */

/* Mesh definition */
int n = 50;
int nWell = 4*4*n;
real[int] xP = [-L, L, L, -L];
real[int] yP = [-H, -H, H, H];
int[int] nGamma = [L/L, H/L, L/L, H/L]*n;

int labelB = 1;
int labelR = 2;
int labelT = 3;
int labelL = 4;

int labelW = 5;

int[int] labelGamma = [labelB, labelR, labelT, labelL, labelW];

border GammaDomainOut(t = 0, 1; i){
    int iNext = (i+1)%nGamma.n;
    x = xP[i]*(1-t) + xP[iNext]*t;
    y = yP[i]*(1-t) + yP[iNext]*t;
    label = labelGamma[i];
}

border GammaWell(t = 0, 2*pi){
    x = Rw*cos(t);
    y = Rw*sin(t);
    label = labelW;
}

mesh Th = buildmesh( GammaDomainOut(nGamma));
plot(Th, wait=1);

/* Diff. operators */
real sqrt2 = sqrt(2.0);
macro epsilon(u, v) [dx(u), dy(v), (dy(u) + dx(v))/sqrt2] // EOM

macro div(u, v) (dx(u) + dy(v)) // EOM

macro grad(p) [dx(p), dy(p)] // EOM

/* fespace definition */
fespace Vh(Th, [P2, P2, P1]);

fespace Vh1(Th, P1);
fespace Vh2(Th, P2);

Vh [u, v, p];
Vh [uu, vv, pp];

Vh2 uOld, vOld;
Vh1 pOld;

real t=1;
real dt = 3600*12;

func real uExact(real t){
    return x^2 + t*x;
}
func real vExact(real t){
    return y^3 + t*y^2;
}

func real pExact(real t){
    return x + t*x^2;
}
func real g(real t){
    return pExact(t) + sigmaYInf(t);
}

problem KirshInitProblem( [u, v, p], [uu, vv, pp] ) =
    int2d(Th)(
        lambda*div(u, v)*div(uu, vv)
        + 2*G*epsilon(u, v)'*epsilon(uu, vv)
        - alpha*p*div(uu, vv)

        + k/mu * grad(p)'*grad(pp)
    )
    +int2d(Th)(
        tauF1(t)*uu + tauF2(t)*vv
    )
    +int2d(Th)(
       k/mu * 2*t *pp
    )
    -int1d(Th, labelR)(
        sigmaXInf(t)*uu
    )
    -int1d(Th, labelL)(
        -sigmaXInf(t)*uu
    )
    -int1d(Th, labelT)(
        sigmaYInf(t)*vv
    )
    -int1d(Th, labelB)(
        p*vv
    )

    +int1d(Th, labelB)(
        g(t)*vv
    )
    +on(labelR, labelT, labelL, p=pExact(t))
    +on(labelB, v=vExact(t))
    +on(labelL, u=uExact(t))
    ;

KirshInitProblem;




Vh2 uEx = uExact(t);
Vh2 vEx = vExact(t);
Vh1 pEx = pExact(t);
plot(Th, v, dim=3, fill=1, nbiso=50, value=1, wait=1);
plot(Th, vEx, dim=3, fill=1, nbiso=50, value=1, wait=1);